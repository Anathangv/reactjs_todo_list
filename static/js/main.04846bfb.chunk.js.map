{"version":3,"sources":["serviceWorker.js","components/itemToDo.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","ItemToDo","className","key","this","props","id","type","onChange","e","onchange","target","value","task","onClick","onDelete","Component","App","state","taskList","updateTaskDescription","event","setState","addTask","newTask","newTaskList","onKeyDownHandler","deleteTask","taskId","filter","index","updateTask","list","Fragment","placeholder","onKeyDown","map","item","React","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCSSC,G,6KAvBH,IAAD,OACP,OACE,yBAAKC,UAAU,WAAWC,IAAKC,KAAKC,MAAMC,IACxC,2BACE,2BACEC,KAAK,OACLC,SAAU,SAACC,GAAD,OAAO,EAAKJ,MAAMK,SAASD,EAAEE,OAAOC,MAAO,EAAKP,MAAMC,KAChEM,MAAOR,KAAKC,MAAMQ,OAEpB,8BACE,4BACEX,UAAU,SACVY,QAAS,kBAAM,EAAKT,MAAMU,SAAS,EAAKV,MAAMC,MAFhD,c,GAXWU,cC6ERC,G,kNA3EbC,MAAQ,CACNL,KAAM,GACNM,SAAU,I,EAGZC,sBAAwB,SAACC,GACvB,EAAKC,SAAS,CAAET,KAAMQ,EAAMV,OAAOC,S,EAGrCW,QAAU,WACR,GAAI,EAAKL,MAAML,KAAM,CACnB,IAAMW,EAAU,EAAKN,MAAML,KACrBY,EAAW,sBAAO,EAAKP,MAAMC,UAAlB,CAA4BK,IAE7C,EAAKF,SAAS,CACZH,SAAUM,EACVZ,KAAM,O,EAKZa,iBAAmB,SAACL,GACA,UAAdA,EAAMlB,KACR,EAAKoB,W,EAKTI,WAAa,SAACC,GACZ,IAAMT,EAAW,EAAKD,MAAMC,SAASU,QACnC,SAAChB,EAAMiB,GAAP,OAAiBA,IAAUF,KAE7B,EAAKN,SAAS,CAAEH,SAAUA,K,EAI5BY,WAAa,SAACnB,EAAON,GACnB,IAAI0B,EAAI,YAAO,EAAKd,MAAMC,UAC1Ba,EAAK1B,GAAMM,EACX,EAAKU,SAAS,CAAEH,SAAUa,K,uDAGlB,IAAD,OACP,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAK/B,UAAU,aACb,0CACA,2BACEA,UAAU,YACVK,KAAK,OACLD,GAAG,kBACHM,MAAOR,KAAKc,MAAML,KAClBqB,YAAY,sBACZ1B,SAAUJ,KAAKgB,sBACfe,UAAW/B,KAAKsB,mBAElB,4BAAQxB,UAAU,SAASY,QAASV,KAAKmB,SAAzC,OAGCnB,KAAKc,MAAMC,SAASiB,KAAI,SAACC,EAAMP,GAAP,OACvB,kBAAC,EAAD,CACE5B,UAAU,WACVC,IAAK2B,EACLjB,KAAMwB,EACN/B,GAAIwB,EACJf,SAAU,EAAKY,WACfjB,SAAU,EAAKqB,sB,GAnEXO,IAAMtB,YCExBuB,IAASC,OAEP,kBAAC,EAAD,MAEAC,SAASC,eAAe,SHyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.04846bfb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./itemToDo.css\";\r\n\r\nclass ItemToDo extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"taskItem\" key={this.props.id}>\r\n        <p>\r\n          <input\r\n            type=\"text\"\r\n            onChange={(e) => this.props.onchange(e.target.value, this.props.id)}\r\n            value={this.props.task}\r\n          />\r\n          <span>\r\n            <button\r\n              className=\"btnDel\"\r\n              onClick={() => this.props.onDelete(this.props.id)}\r\n            >\r\n              Del\r\n            </button>\r\n          </span>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ItemToDo;\r\n","import React from \"react\";\r\nimport ItemToDo from \"./components/itemToDo\";\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    task: \"\",\r\n    taskList: [],\r\n  };\r\n\r\n  updateTaskDescription = (event) => {\r\n    this.setState({ task: event.target.value });\r\n  };\r\n\r\n  addTask = () => {\r\n    if (this.state.task) {\r\n      const newTask = this.state.task;\r\n      const newTaskList = [...this.state.taskList, newTask];\r\n\r\n      this.setState({\r\n        taskList: newTaskList,\r\n        task: \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n  onKeyDownHandler = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      this.addTask();\r\n    }\r\n  };\r\n\r\n  //this part is diferent from the study version, but it works well\r\n  deleteTask = (taskId) => {\r\n    const taskList = this.state.taskList.filter(\r\n      (task, index) => index !== taskId\r\n    );\r\n    this.setState({ taskList: taskList });\r\n  };\r\n\r\n  //this part is diferent from the study version, but it works well\r\n  updateTask = (value, id) => {\r\n    let list = [...this.state.taskList];\r\n    list[id] = value;\r\n    this.setState({ taskList: list });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"container\">\r\n          <h1>TO DO LIST</h1>\r\n          <input\r\n            className=\"inputTask\"\r\n            type=\"text\"\r\n            id=\"taskDescription\"\r\n            value={this.state.task}\r\n            placeholder=\"Type here your task\"\r\n            onChange={this.updateTaskDescription}\r\n            onKeyDown={this.onKeyDownHandler}\r\n          />\r\n          <button className=\"btnAdd\" onClick={this.addTask}>\r\n            Add\r\n          </button>\r\n          {this.state.taskList.map((item, index) => (\r\n            <ItemToDo\r\n              className=\"itemTask\"\r\n              key={index}\r\n              task={item}\r\n              id={index}\r\n              onDelete={this.deleteTask}\r\n              onchange={this.updateTask}\r\n            />\r\n          ))}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  //<React.StrictMode>\r\n  <App />,\r\n  //</React.StrictMode>\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}